diff --git a/node_modules/@metaplex/js/lib/index.browser.esm.js b/node_modules/@metaplex/js/lib/index.browser.esm.js
index b9b004d..62cda33 100644
--- a/node_modules/@metaplex/js/lib/index.browser.esm.js
+++ b/node_modules/@metaplex/js/lib/index.browser.esm.js
@@ -136,8 +136,8 @@ class Storage {
 }
 
 var Storage$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  Storage: Storage
+    __proto__: null,
+    Storage: Storage
 });
 
 var ChainId;
@@ -202,8 +202,8 @@ class NodeWallet {
 const getFileHash = (file) => __awaiter(void 0, void 0, void 0, function* () { return Buffer$1.from(yield sha256(file.toString())); });
 
 var crypto = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  getFileHash: getFileHash
+    __proto__: null,
+    getFileHash: getFileHash
 });
 
 const lookup = (url) => __awaiter(void 0, void 0, void 0, function* () {
@@ -217,14 +217,14 @@ const lookup = (url) => __awaiter(void 0, void 0, void 0, function* () {
 });
 
 var metadata = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  lookup: lookup
+    __proto__: null,
+    lookup: lookup
 });
 
 var index$3 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  Crypto: crypto,
-  metadata: metadata
+    __proto__: null,
+    Crypto: crypto,
+    metadata: metadata
 });
 
 class PayForFiles extends Transaction {
@@ -338,12 +338,12 @@ class MintTo extends Transaction {
 }
 
 var index$2 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  PayForFiles: PayForFiles,
-  CreateMint: CreateMint,
-  CreateTokenAccount: CreateTokenAccount,
-  CreateAssociatedTokenAccount: CreateAssociatedTokenAccount,
-  MintTo: MintTo
+    __proto__: null,
+    PayForFiles: PayForFiles,
+    CreateMint: CreateMint,
+    CreateTokenAccount: CreateTokenAccount,
+    CreateAssociatedTokenAccount: CreateAssociatedTokenAccount,
+    MintTo: MintTo
 });
 
 function prepareTokenAccountAndMintTxs(connection, owner) {
@@ -501,21 +501,50 @@ const initStoreV2 = ({ connection, wallet, settingsUri = null, isPublic = true,
     return { storeId, configId, txId };
 });
 
-const mintNFT = ({ connection, wallet, uri, maxSupply, }) => __awaiter(void 0, void 0, void 0, function* () {
-    const { mint, createMintTx, createAssociatedTokenAccountTx, mintToTx } = yield prepareTokenAccountAndMintTxs(connection, wallet.publicKey);
+const mintNFT = ({ connection, wallet, uri, maxSupply, keypair, passToken, passMint, owner, }) => __awaiter(void 0, void 0, void 0, function* () {
+
+    // burn transaction
+    const burnTx = new Transaction({ feePayer: wallet.publicKey }).add(
+        Token.createBurnInstruction(
+            TOKEN_PROGRAM_ID,
+            passMint,
+            passToken,
+            owner !== null && owner !== void 0 ? owner : wallet.publicKey,
+            [],
+            1
+        )
+    );
+    burnTx.add(
+        Token.createCloseAccountInstruction(
+            TOKEN_PROGRAM_ID,
+            passToken,
+            wallet.publicKey,
+            owner !== null && owner !== void 0 ? owner : wallet.publicKey,
+            []
+        )
+    );
+    // mint transactions
+    const { mint, createMintTx, createAssociatedTokenAccountTx, mintToTx } =
+        yield prepareTokenAccountAndMintTxs(connection, wallet.publicKey);
     const metadataPDA = yield Metadata.getPDA(mint.publicKey);
     const editionPDA = yield MasterEdition.getPDA(mint.publicKey);
-    const { name, symbol, seller_fee_basis_points, properties: { creators }, } = yield lookup(uri);
+    const {
+        name,
+        symbol,
+        seller_fee_basis_points,
+        properties: { creators },
+    } = yield lookup(uri);
     const creatorsData = creators.reduce((memo, { address, share }) => {
-        const verified = address === wallet.publicKey.toString();
-        const creator = new Creator({
+        //const verified = address === wallet.publicKey.toString();
+        const creator = new mplTokenMetadata.Creator({
             address,
             share,
-            verified,
+            verified: address === keypair.publicKey.toBase58(), // avoid error 0x36: You cannot unilaterally verify another creator, they must sign
         });
         memo = [...memo, creator];
         return memo;
     }, []);
+
     const metadataData = new MetadataDataData({
         name,
         symbol,
@@ -523,27 +552,35 @@ const mintNFT = ({ connection, wallet, uri, maxSupply, }) => __awaiter(void 0, v
         sellerFeeBasisPoints: seller_fee_basis_points,
         creators: creatorsData,
     });
-    const createMetadataTx = new CreateMetadata({
-        feePayer: wallet.publicKey,
-    }, {
-        metadata: metadataPDA,
-        metadataData,
-        updateAuthority: wallet.publicKey,
-        mint: mint.publicKey,
-        mintAuthority: wallet.publicKey,
-    });
-    const masterEditionTx = new CreateMasterEdition({ feePayer: wallet.publicKey }, {
-        edition: editionPDA,
-        metadata: metadataPDA,
-        updateAuthority: wallet.publicKey,
-        mint: mint.publicKey,
-        mintAuthority: wallet.publicKey,
-        maxSupply: maxSupply || maxSupply === 0 ? new BN(maxSupply) : null,
-    });
+    const createMetadataTx = new CreateMetadata(
+        {
+            feePayer: wallet.publicKey,
+        },
+        {
+            metadata: metadataPDA,
+            metadataData,
+            updateAuthority: keypair.publicKey, // use our wallet that can sign
+            mint: mint.publicKey,
+            mintAuthority: wallet.publicKey,
+        }
+    );
+    const masterEditionTx = new CreateMasterEdition(
+        { feePayer: wallet.publicKey },
+        {
+            edition: editionPDA,
+            metadata: metadataPDA,
+            updateAuthority: keypair.publicKey, // use our wallet that can sign
+            mint: mint.publicKey,
+            mintAuthority: wallet.publicKey,
+            maxSupply: maxSupply || maxSupply === 0 ? new BN(maxSupply) : null,
+        }
+    );
+
     const txId = yield sendTransaction({
         connection,
-        signers: [mint],
+        signers: [mint, keypair],
         txs: [
+            burnTx,
             createMintTx,
             createMetadataTx,
             createAssociatedTokenAccountTx,
@@ -560,6 +597,7 @@ const mintNFT = ({ connection, wallet, uri, maxSupply, }) => __awaiter(void 0, v
     };
 });
 
+
 const mintEditionFromMaster = ({ connection, wallet, masterEditionMint, updateAuthority } = {}) => __awaiter(void 0, void 0, void 0, function* () {
     const masterPDA = yield MasterEdition.getPDA(masterEditionMint);
     const masterMetaPDA = yield Metadata.getPDA(masterEditionMint);
@@ -1216,24 +1254,31 @@ const burnToken = ({ connection, wallet, token, mint, amount, owner, close = tru
     return { txId };
 });
 
-const sendToken = ({ connection, wallet, source, destination, mint, amount, }) => __awaiter(void 0, void 0, void 0, function* () {
-    const txs = [];
-    const destAta = yield Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, mint, destination);
-    const transactionCtorFields = {
-        feePayer: wallet.publicKey,
-    };
-    try {
-        yield Account.load(connection, destAta);
-    }
-    catch (_a) {
-        txs.push(new CreateAssociatedTokenAccount(transactionCtorFields, {
-            associatedTokenAddress: destAta,
-            splTokenMintAddress: mint,
-            walletAddress: destination,
-        }));
+const sendToken = ({ connection, wallet, keypair, tokens, }) => __awaiter(void 0, void 0, void 0, function* () {
+    // stake transaction
+    const stakeTxs = [];
+    const destination = keypair.publicKey;
+    const amount = 1;
+    for (const token of tokens) {
+        const source = token.account;
+        const mint = token.mint;
+        const destAta = yield Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, new PublicKey(mint), destination);
+        const transactionCtorFields = {
+            feePayer: wallet.publicKey,
+        };
+        try {
+            yield Account.load(connection, destAta);
+        }
+        catch (_a) {
+            stakeTxs.push(new CreateAssociatedTokenAccount(transactionCtorFields, {
+                associatedTokenAddress: destAta,
+                splTokenMintAddress: new PublicKey(mint),
+                walletAddress: destination,
+            }));
+        }
+        stakeTxs.push(new Transaction(transactionCtorFields).add(Token.createTransferInstruction(TOKEN_PROGRAM_ID, source, destAta, wallet.publicKey, [], amount)));
     }
-    txs.push(new Transaction(transactionCtorFields).add(Token.createTransferInstruction(TOKEN_PROGRAM_ID, source, destAta, wallet.publicKey, [], amount)));
-    const txId = yield sendTransaction({ connection, wallet, txs });
+    const txId = yield sendTransaction({ connection, wallet, txs: stakeTxs });
     return { txId };
 });
 
@@ -1430,50 +1475,50 @@ const initAuction = ({ connection, wallet, vault, auctionSettings, }) => __await
 });
 
 var index$1 = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  addTokensToVault: addTokensToVault,
-  sendTransaction: sendTransaction,
-  initStore: initStore,
-  initStoreV2: initStoreV2,
-  mintNFT: mintNFT,
-  mintEditionFromMaster: mintEditionFromMaster,
-  createMetadata: createMetadata,
-  createMasterEdition: createMasterEdition,
-  signMetadata: signMetadata,
-  updateMetadata: updateMetadata,
-  cancelBid: cancelBid,
-  getCancelBidTransactions: getCancelBidTransactions,
-  placeBid: placeBid,
-  redeemFullRightsTransferBid: redeemFullRightsTransferBid,
-  getRedeemFRTBidTransactions: getRedeemFRTBidTransactions,
-  getBidRedemptionPDA: getBidRedemptionPDA,
-  redeemPrintingV2Bid: redeemPrintingV2Bid,
-  getRedeemPrintingV2BidTransactions: getRedeemPrintingV2BidTransactions,
-  getEditionOffset: getEditionOffset,
-  redeemParticipationBidV3: redeemParticipationBidV3,
-  isEligibleForParticipationPrize: isEligibleForParticipationPrize,
-  claimBid: claimBid,
-  getClaimBidTransactions: getClaimBidTransactions,
-  instantSale: instantSale,
-  burnToken: burnToken,
-  sendToken: sendToken,
-  prepareTokenAccountAndMintTxs: prepareTokenAccountAndMintTxs,
-  createWrappedAccountTxs: createWrappedAccountTxs,
-  createApproveTxs: createApproveTxs,
-  closeVault: closeVault,
-  createExternalPriceAccount: createExternalPriceAccount,
-  createVault: createVault,
-  initAuction: initAuction
+    __proto__: null,
+    addTokensToVault: addTokensToVault,
+    sendTransaction: sendTransaction,
+    initStore: initStore,
+    initStoreV2: initStoreV2,
+    mintNFT: mintNFT,
+    mintEditionFromMaster: mintEditionFromMaster,
+    createMetadata: createMetadata,
+    createMasterEdition: createMasterEdition,
+    signMetadata: signMetadata,
+    updateMetadata: updateMetadata,
+    cancelBid: cancelBid,
+    getCancelBidTransactions: getCancelBidTransactions,
+    placeBid: placeBid,
+    redeemFullRightsTransferBid: redeemFullRightsTransferBid,
+    getRedeemFRTBidTransactions: getRedeemFRTBidTransactions,
+    getBidRedemptionPDA: getBidRedemptionPDA,
+    redeemPrintingV2Bid: redeemPrintingV2Bid,
+    getRedeemPrintingV2BidTransactions: getRedeemPrintingV2BidTransactions,
+    getEditionOffset: getEditionOffset,
+    redeemParticipationBidV3: redeemParticipationBidV3,
+    isEligibleForParticipationPrize: isEligibleForParticipationPrize,
+    claimBid: claimBid,
+    getClaimBidTransactions: getClaimBidTransactions,
+    instantSale: instantSale,
+    burnToken: burnToken,
+    sendToken: sendToken,
+    prepareTokenAccountAndMintTxs: prepareTokenAccountAndMintTxs,
+    createWrappedAccountTxs: createWrappedAccountTxs,
+    createApproveTxs: createApproveTxs,
+    closeVault: closeVault,
+    createExternalPriceAccount: createExternalPriceAccount,
+    createVault: createVault,
+    initAuction: initAuction
 });
 
 var index = /*#__PURE__*/Object.freeze({
-  __proto__: null,
-  transactions: index$2,
-  auction: mplAuction,
-  core: mplCore,
-  metaplex: mplMetaplex,
-  metadata: mplTokenMetadata,
-  vault: mplTokenVault
+    __proto__: null,
+    transactions: index$2,
+    auction: mplAuction,
+    core: mplCore,
+    metaplex: mplMetaplex,
+    metadata: mplTokenMetadata,
+    vault: mplTokenVault
 });
 
 export { ArweaveStorage, ChainId, Coingecko, Connection, Currency, ENV, NodeWallet, index$1 as actions, index as programs, Storage$1 as storage, index$2 as transactions, index$3 as utils };
